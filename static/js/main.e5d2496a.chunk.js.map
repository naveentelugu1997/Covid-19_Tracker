{"version":3,"sources":["components/InfoBox.js","components/Linegraph.js","components/Util.js","components/CountriesCasesTable.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","total","backGroundColor","classes","makeStyles","root","minWidth","backgroundColor","bullet","display","margin","transform","fontSize","pos","marginBottom","useStyles","Card","className","variant","CardContent","Typography","color","options","legend","elements","point","radius","responsive","maintainAspectRatio","tooltips","mode","intersect","scales","xAxes","type","time","format","tooltipsFormat","yAxes","ticks","beginAtZero","builChartData","data","casesType","lastDatapoint","chartData","date","newDataPoint","x","y","push","Linegraph","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","borderColor","sortData","sortedData","sort","b","StyledTableCell","withStyles","theme","head","palette","common","black","white","body","TableCell","StyledTableRow","action","hover","TableRow","table","tablecontainer","height","CountriesCasesTable","countries","TableContainer","component","Paper","Table","aria-label","TableHead","align","TableBody","map","country","scope","numeral","App","countryInfo","setCountryInfo","setInputCountry","setCountries","tableData","setTableData","setCasesType","console","log","i","name","value","iso2","getCountriesData","onCountryChange","e","countryCode","target","url","FormControl","Select","varient","onChange","MenuItem","onClick","todayCases","todayRecovered","recovered","todayDeaths","deaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5d2496a.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Card, CardContent, Typography, makeStyles} from '@material-ui/core'\r\nimport './infoBox.css'; \r\n\r\n\r\n\r\nfunction InfoBox({title,cases,total, backGroundColor}) {\r\n    const useStyles = makeStyles({\r\n\r\n        root: {\r\n            minWidth: 275,\r\n            backgroundColor: backGroundColor,\r\n          },\r\n          bullet: {\r\n            display: 'inline-block',\r\n            margin: '0 2px',\r\n            transform: 'scale(0.8)',\r\n          },\r\n          title: {\r\n            fontSize: 18,\r\n          },\r\n          pos: {\r\n            marginBottom: 12,\r\n          },\r\n    \r\n    })\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Card className={classes.root} variant=\"outlined\">\r\n            <CardContent className=\"\">\r\n                <Typography className={classes.title} color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                <Typography className=\"\" color=\"textPrimary\">\r\n                    +{cases}\r\n                </Typography>\r\n                <Typography className={classes.pos} color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React, {useState, useEffect} from 'react'\r\nimport {Line} from 'react-chartjs-2';\r\nimport \"./Linegraph.css\";\r\n\r\nconst options = {\r\n    legend: {\r\n        display:false,\r\n    },\r\n\r\n    elements:{\r\n        point:{\r\n            radius:0\r\n        },\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: 'index',\r\n        intersect: false,\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: 'time',\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipsFormat: 'll',\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                // gridLines: {\r\n                //     display: false,\r\n                // },\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                },\r\n            },\r\n        ],\r\n\r\n    },\r\n};\r\n\r\n\r\nconst builChartData = (data, casesType)=> {\r\n    let chartData = [];\r\n    let lastDatapoint;\r\n\r\n    for(let date in data.cases){\r\n        if(lastDatapoint){\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDatapoint\r\n            }\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDatapoint = data[casesType][date];  \r\n    }\r\n\r\n    return chartData;\r\n}\r\n\r\nfunction Linegraph({casesType}) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async ()=>{\r\n            await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n            .then((response)=>{\r\n                return response.json();\r\n            })\r\n            .then((data)=>{\r\n                let chartData = builChartData(data, casesType);\r\n                setData(chartData);\r\n            });\r\n        };\r\n        fetchData();\r\n    },[casesType]);\r\n\r\n\r\n    return (\r\n        <div className='chart-container'>\r\n         {data?.length > 0 && (\r\n            <Line\r\n                data={\r\n                    {\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                                borderColor: \"#CC1034\",\r\n                                data: data,\r\n                            }\r\n                        ]\r\n                    }\r\n                }\r\n                options = {options}\r\n            />\r\n         )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Linegraph\r\n","import React from \"react\";\r\nimport numeral from 'numeral'\r\n\r\nexport const sortData = (data) => {\r\n    let sortedData = [...data];\r\n    sortedData.sort((a,b) =>{\r\n        if(a.cases >b.cases){\r\n            return -1;\r\n        } else {\r\n            return 1;\r\n        }\r\n    });\r\n    return sortedData;\r\n}","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport sortData from './Util';\r\nimport { withStyles, makeStyles, Table, \r\n    TableBody, TableCell, TableContainer,\r\n     TableHead, TableRow,Paper} from '@material-ui/core'\r\nimport './Table.css';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n  root: {\r\n    '&:nth-of-type(odd)': {\r\n      backgroundColor: theme.palette.action.hover,\r\n    },\r\n  },\r\n}))(TableRow);\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 300,\r\n    \r\n  },\r\n  tablecontainer:{\r\n    height: 580,\r\n  }\r\n});\r\n\r\nfunction CountriesCasesTable({countries}) {\r\n    const classes = useStyles();\r\n    return (\r\n\r\n    <TableContainer component={Paper} className={classes.tablecontainer}>\r\n      <Table className={classes.table} aria-label=\"customized table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <StyledTableCell>Country</StyledTableCell>\r\n            <StyledTableCell align=\"right\">Cases</StyledTableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {countries.map((country) => (\r\n            <StyledTableRow key={country.country}>\r\n              <StyledTableCell component=\"th\" scope=\"row\">\r\n                {country.country}\r\n              </StyledTableCell>\r\n              <StyledTableCell align=\"right\">{numeral(country.cases).format(\"0,0\")}</StyledTableCell>\r\n            </StyledTableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n    )\r\n}\r\n\r\nexport default CountriesCasesTable\r\n","import React, {useState, useEffect} from 'react'\nimport './App.css';\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from './components/InfoBox';\nimport Linegraph from './components/Linegraph';\nimport CountriesCasesTable from './components/CountriesCasesTable';\nimport {sortData} from './components/Util'\n\nfunction App() {\n  const [countryInfo, setCountryInfo] = useState({});\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countries, setCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(()=>{\n    const getCountriesData = async()=>{\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response)=> response.json())\n        .then((data)=> {\n          console.log(data);\n          const countries = data.map((country,i)=> ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setTableData(sortedData);\n        });\n    };\n    getCountriesData();\n    }, [])\n\n\n  useEffect(()=> {\n    const url = \"https://disease.sh/v3/covid-19/all\"\n    fetch(url).then((response) => response.json())\n    .then((data)=> {setCountryInfo(data);\n      \n    });\n  }, []);\n\n  const onCountryChange = async(e) => {\n    const countryCode = e.target.value;\n    \n    const url = \n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response)=> response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n      })\n\n\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"app_top\">\n        <div className=\"app_left\">\n          <div className=\"app_header\">\n            <h1 className=\"app_heading\">Covid-19 Tracker</h1>\n            <div className=\"app_dropdown\">\n              <FormControl >\n                <Select varient=\"outlined\"\n                  value={country}\n                  onChange={onCountryChange}>\n                  <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                  {countries.map((country)=> (\n                    <MenuItem value={country.value}>{country.name}</MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </div>\n          </div>\n\n          <div className=\"app_stats\">\n            <div className=\"infobox_cases\">\n              <InfoBox \n              onClick={(e)=> setCasesType(\"cases\")}\n              title={\"Confirmed Cases\"} \n              cases={countryInfo.todayCases} \n              total={countryInfo.cases}\n              backGroundColor='#ffcc80'\n              />\n              \n            </div>\n            <div className=\"infobox_recovered\">\n              <InfoBox \n                onClick={(e) => setCasesType(\"recovered\")}\n                title={\"Recovered Cases\"} \n                cases={countryInfo.todayRecovered}  \n                total={countryInfo.recovered}\n                backGroundColor='#a5d6a7'\n                />\n            </div>\n            \n            <div className=\"infobox_recovered deaths\">\n              <InfoBox \n                onClick={(e) => setCasesType(\"deaths\")}\n                title={\"Deaths\"} \n                cases={countryInfo.todayDeaths}  \n                total={countryInfo.deaths}\n                backGroundColor='#f44336'\n                />\n                \n            </div>\n            \n          </div>\n          <div className=\"app_linegraph\">\n            <h3>Worldwide new {casesType}</h3>\n            <Linegraph casesType={casesType} />\n          </div>\n        </div>\n\n        <Card className=\"app_right\">\n          <CardContent>\n            <div className=\"app_information\">\n                <h3>Live cases by country</h3>\n                <CountriesCasesTable countries={tableData}/>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n    </div>\n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}